/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package github.cheneykwok.thrift.gen.task;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.20.0)", date = "2024-07-26")
public class StatusTaskRequest implements org.apache.thrift.TBase<StatusTaskRequest, StatusTaskRequest._Fields>, java.io.Serializable, Cloneable, Comparable<StatusTaskRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatusTaskRequest");

  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SRC_INNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcInnerId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField STORE_SYS_OUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("storeSysOutId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TASK_RUN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskRunDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AFTER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("afterStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BEFORE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("beforeStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_DUPLICATE_FIELD_DESC = new org.apache.thrift.protocol.TField("isDuplicate", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatusTaskRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatusTaskRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable String taskName; // required
  public long srcInnerId; // required
  public @org.apache.thrift.annotation.Nullable String storeSysOutId; // required
  public long taskRunDate; // required
  public int taskType; // required
  public int afterStatus; // required
  public int beforeStatus; // required
  public boolean isDuplicate; // required
  public int traceId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_NAME((short)1, "taskName"),
    SRC_INNER_ID((short)2, "srcInnerId"),
    STORE_SYS_OUT_ID((short)3, "storeSysOutId"),
    TASK_RUN_DATE((short)4, "taskRunDate"),
    TASK_TYPE((short)5, "taskType"),
    AFTER_STATUS((short)6, "afterStatus"),
    BEFORE_STATUS((short)7, "beforeStatus"),
    IS_DUPLICATE((short)8, "isDuplicate"),
    TRACE_ID((short)9, "traceId");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_NAME
          return TASK_NAME;
        case 2: // SRC_INNER_ID
          return SRC_INNER_ID;
        case 3: // STORE_SYS_OUT_ID
          return STORE_SYS_OUT_ID;
        case 4: // TASK_RUN_DATE
          return TASK_RUN_DATE;
        case 5: // TASK_TYPE
          return TASK_TYPE;
        case 6: // AFTER_STATUS
          return AFTER_STATUS;
        case 7: // BEFORE_STATUS
          return BEFORE_STATUS;
        case 8: // IS_DUPLICATE
          return IS_DUPLICATE;
        case 9: // TRACE_ID
          return TRACE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SRCINNERID_ISSET_ID = 0;
  private static final int __TASKRUNDATE_ISSET_ID = 1;
  private static final int __TASKTYPE_ISSET_ID = 2;
  private static final int __AFTERSTATUS_ISSET_ID = 3;
  private static final int __BEFORESTATUS_ISSET_ID = 4;
  private static final int __ISDUPLICATE_ISSET_ID = 5;
  private static final int __TRACEID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TRACE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC_INNER_ID, new org.apache.thrift.meta_data.FieldMetaData("srcInnerId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STORE_SYS_OUT_ID, new org.apache.thrift.meta_data.FieldMetaData("storeSysOutId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_RUN_DATE, new org.apache.thrift.meta_data.FieldMetaData("taskRunDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AFTER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("afterStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BEFORE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("beforeStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DUPLICATE, new org.apache.thrift.meta_data.FieldMetaData("isDuplicate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatusTaskRequest.class, metaDataMap);
  }

  public StatusTaskRequest() {
  }

  public StatusTaskRequest(
    String taskName,
    long srcInnerId,
    String storeSysOutId,
    long taskRunDate,
    int taskType,
    int afterStatus,
    int beforeStatus,
    boolean isDuplicate)
  {
    this();
    this.taskName = taskName;
    this.srcInnerId = srcInnerId;
    setSrcInnerIdIsSet(true);
    this.storeSysOutId = storeSysOutId;
    this.taskRunDate = taskRunDate;
    setTaskRunDateIsSet(true);
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    this.afterStatus = afterStatus;
    setAfterStatusIsSet(true);
    this.beforeStatus = beforeStatus;
    setBeforeStatusIsSet(true);
    this.isDuplicate = isDuplicate;
    setIsDuplicateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatusTaskRequest(StatusTaskRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    this.srcInnerId = other.srcInnerId;
    if (other.isSetStoreSysOutId()) {
      this.storeSysOutId = other.storeSysOutId;
    }
    this.taskRunDate = other.taskRunDate;
    this.taskType = other.taskType;
    this.afterStatus = other.afterStatus;
    this.beforeStatus = other.beforeStatus;
    this.isDuplicate = other.isDuplicate;
    this.traceId = other.traceId;
  }

  @Override
  public StatusTaskRequest deepCopy() {
    return new StatusTaskRequest(this);
  }

  @Override
  public void clear() {
    this.taskName = null;
    setSrcInnerIdIsSet(false);
    this.srcInnerId = 0;
    this.storeSysOutId = null;
    setTaskRunDateIsSet(false);
    this.taskRunDate = 0;
    setTaskTypeIsSet(false);
    this.taskType = 0;
    setAfterStatusIsSet(false);
    this.afterStatus = 0;
    setBeforeStatusIsSet(false);
    this.beforeStatus = 0;
    setIsDuplicateIsSet(false);
    this.isDuplicate = false;
    setTraceIdIsSet(false);
    this.traceId = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public String getTaskName() {
    return this.taskName;
  }

  public StatusTaskRequest setTaskName(@org.apache.thrift.annotation.Nullable String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public long getSrcInnerId() {
    return this.srcInnerId;
  }

  public StatusTaskRequest setSrcInnerId(long srcInnerId) {
    this.srcInnerId = srcInnerId;
    setSrcInnerIdIsSet(true);
    return this;
  }

  public void unsetSrcInnerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SRCINNERID_ISSET_ID);
  }

  /** Returns true if field srcInnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcInnerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SRCINNERID_ISSET_ID);
  }

  public void setSrcInnerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SRCINNERID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getStoreSysOutId() {
    return this.storeSysOutId;
  }

  public StatusTaskRequest setStoreSysOutId(@org.apache.thrift.annotation.Nullable String storeSysOutId) {
    this.storeSysOutId = storeSysOutId;
    return this;
  }

  public void unsetStoreSysOutId() {
    this.storeSysOutId = null;
  }

  /** Returns true if field storeSysOutId is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreSysOutId() {
    return this.storeSysOutId != null;
  }

  public void setStoreSysOutIdIsSet(boolean value) {
    if (!value) {
      this.storeSysOutId = null;
    }
  }

  public long getTaskRunDate() {
    return this.taskRunDate;
  }

  public StatusTaskRequest setTaskRunDate(long taskRunDate) {
    this.taskRunDate = taskRunDate;
    setTaskRunDateIsSet(true);
    return this;
  }

  public void unsetTaskRunDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKRUNDATE_ISSET_ID);
  }

  /** Returns true if field taskRunDate is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskRunDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKRUNDATE_ISSET_ID);
  }

  public void setTaskRunDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKRUNDATE_ISSET_ID, value);
  }

  public int getTaskType() {
    return this.taskType;
  }

  public StatusTaskRequest setTaskType(int taskType) {
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    return this;
  }

  public void unsetTaskType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  public void setTaskTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TASKTYPE_ISSET_ID, value);
  }

  public int getAfterStatus() {
    return this.afterStatus;
  }

  public StatusTaskRequest setAfterStatus(int afterStatus) {
    this.afterStatus = afterStatus;
    setAfterStatusIsSet(true);
    return this;
  }

  public void unsetAfterStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AFTERSTATUS_ISSET_ID);
  }

  /** Returns true if field afterStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AFTERSTATUS_ISSET_ID);
  }

  public void setAfterStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AFTERSTATUS_ISSET_ID, value);
  }

  public int getBeforeStatus() {
    return this.beforeStatus;
  }

  public StatusTaskRequest setBeforeStatus(int beforeStatus) {
    this.beforeStatus = beforeStatus;
    setBeforeStatusIsSet(true);
    return this;
  }

  public void unsetBeforeStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BEFORESTATUS_ISSET_ID);
  }

  /** Returns true if field beforeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBeforeStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BEFORESTATUS_ISSET_ID);
  }

  public void setBeforeStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BEFORESTATUS_ISSET_ID, value);
  }

  public boolean isIsDuplicate() {
    return this.isDuplicate;
  }

  public StatusTaskRequest setIsDuplicate(boolean isDuplicate) {
    this.isDuplicate = isDuplicate;
    setIsDuplicateIsSet(true);
    return this;
  }

  public void unsetIsDuplicate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISDUPLICATE_ISSET_ID);
  }

  /** Returns true if field isDuplicate is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDuplicate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISDUPLICATE_ISSET_ID);
  }

  public void setIsDuplicateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISDUPLICATE_ISSET_ID, value);
  }

  public int getTraceId() {
    return this.traceId;
  }

  public StatusTaskRequest setTraceId(int traceId) {
    this.traceId = traceId;
    setTraceIdIsSet(true);
    return this;
  }

  public void unsetTraceId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRACEID_ISSET_ID);
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRACEID_ISSET_ID);
  }

  public void setTraceIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRACEID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case SRC_INNER_ID:
      if (value == null) {
        unsetSrcInnerId();
      } else {
        setSrcInnerId((Long)value);
      }
      break;

    case STORE_SYS_OUT_ID:
      if (value == null) {
        unsetStoreSysOutId();
      } else {
        setStoreSysOutId((String)value);
      }
      break;

    case TASK_RUN_DATE:
      if (value == null) {
        unsetTaskRunDate();
      } else {
        setTaskRunDate((Long)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((Integer)value);
      }
      break;

    case AFTER_STATUS:
      if (value == null) {
        unsetAfterStatus();
      } else {
        setAfterStatus((Integer)value);
      }
      break;

    case BEFORE_STATUS:
      if (value == null) {
        unsetBeforeStatus();
      } else {
        setBeforeStatus((Integer)value);
      }
      break;

    case IS_DUPLICATE:
      if (value == null) {
        unsetIsDuplicate();
      } else {
        setIsDuplicate((Boolean)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_NAME:
      return getTaskName();

    case SRC_INNER_ID:
      return getSrcInnerId();

    case STORE_SYS_OUT_ID:
      return getStoreSysOutId();

    case TASK_RUN_DATE:
      return getTaskRunDate();

    case TASK_TYPE:
      return getTaskType();

    case AFTER_STATUS:
      return getAfterStatus();

    case BEFORE_STATUS:
      return getBeforeStatus();

    case IS_DUPLICATE:
      return isIsDuplicate();

    case TRACE_ID:
      return getTraceId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_NAME:
      return isSetTaskName();
    case SRC_INNER_ID:
      return isSetSrcInnerId();
    case STORE_SYS_OUT_ID:
      return isSetStoreSysOutId();
    case TASK_RUN_DATE:
      return isSetTaskRunDate();
    case TASK_TYPE:
      return isSetTaskType();
    case AFTER_STATUS:
      return isSetAfterStatus();
    case BEFORE_STATUS:
      return isSetBeforeStatus();
    case IS_DUPLICATE:
      return isSetIsDuplicate();
    case TRACE_ID:
      return isSetTraceId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that instanceof StatusTaskRequest)
      return this.equals((StatusTaskRequest)that);
    return false;
  }

  public boolean equals(StatusTaskRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_srcInnerId = true;
    boolean that_present_srcInnerId = true;
    if (this_present_srcInnerId || that_present_srcInnerId) {
      if (!(this_present_srcInnerId && that_present_srcInnerId))
        return false;
      if (this.srcInnerId != that.srcInnerId)
        return false;
    }

    boolean this_present_storeSysOutId = true && this.isSetStoreSysOutId();
    boolean that_present_storeSysOutId = true && that.isSetStoreSysOutId();
    if (this_present_storeSysOutId || that_present_storeSysOutId) {
      if (!(this_present_storeSysOutId && that_present_storeSysOutId))
        return false;
      if (!this.storeSysOutId.equals(that.storeSysOutId))
        return false;
    }

    boolean this_present_taskRunDate = true;
    boolean that_present_taskRunDate = true;
    if (this_present_taskRunDate || that_present_taskRunDate) {
      if (!(this_present_taskRunDate && that_present_taskRunDate))
        return false;
      if (this.taskRunDate != that.taskRunDate)
        return false;
    }

    boolean this_present_taskType = true;
    boolean that_present_taskType = true;
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (this.taskType != that.taskType)
        return false;
    }

    boolean this_present_afterStatus = true;
    boolean that_present_afterStatus = true;
    if (this_present_afterStatus || that_present_afterStatus) {
      if (!(this_present_afterStatus && that_present_afterStatus))
        return false;
      if (this.afterStatus != that.afterStatus)
        return false;
    }

    boolean this_present_beforeStatus = true;
    boolean that_present_beforeStatus = true;
    if (this_present_beforeStatus || that_present_beforeStatus) {
      if (!(this_present_beforeStatus && that_present_beforeStatus))
        return false;
      if (this.beforeStatus != that.beforeStatus)
        return false;
    }

    boolean this_present_isDuplicate = true;
    boolean that_present_isDuplicate = true;
    if (this_present_isDuplicate || that_present_isDuplicate) {
      if (!(this_present_isDuplicate && that_present_isDuplicate))
        return false;
      if (this.isDuplicate != that.isDuplicate)
        return false;
    }

    boolean this_present_traceId = true && this.isSetTraceId();
    boolean that_present_traceId = true && that.isSetTraceId();
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (this.traceId != that.traceId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTaskName()) ? 131071 : 524287);
    if (isSetTaskName())
      hashCode = hashCode * 8191 + taskName.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(srcInnerId);

    hashCode = hashCode * 8191 + ((isSetStoreSysOutId()) ? 131071 : 524287);
    if (isSetStoreSysOutId())
      hashCode = hashCode * 8191 + storeSysOutId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(taskRunDate);

    hashCode = hashCode * 8191 + taskType;

    hashCode = hashCode * 8191 + afterStatus;

    hashCode = hashCode * 8191 + beforeStatus;

    hashCode = hashCode * 8191 + ((isDuplicate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
    if (isSetTraceId())
      hashCode = hashCode * 8191 + traceId;

    return hashCode;
  }

  @Override
  public int compareTo(StatusTaskRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.compare(isSetTaskName(), other.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, other.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetSrcInnerId(), other.isSetSrcInnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcInnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcInnerId, other.srcInnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetStoreSysOutId(), other.isSetStoreSysOutId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreSysOutId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeSysOutId, other.storeSysOutId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTaskRunDate(), other.isSetTaskRunDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskRunDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskRunDate, other.taskRunDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTaskType(), other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetAfterStatus(), other.isSetAfterStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterStatus, other.afterStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetBeforeStatus(), other.isSetBeforeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeforeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beforeStatus, other.beforeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetIsDuplicate(), other.isSetIsDuplicate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDuplicate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isDuplicate, other.isDuplicate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.compare(isSetTraceId(), other.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatusTaskRequest(");
    boolean first = true;

    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("srcInnerId:");
    sb.append(this.srcInnerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeSysOutId:");
    if (this.storeSysOutId == null) {
      sb.append("null");
    } else {
      sb.append(this.storeSysOutId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskRunDate:");
    sb.append(this.taskRunDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskType:");
    sb.append(this.taskType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("afterStatus:");
    sb.append(this.afterStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beforeStatus:");
    sb.append(this.beforeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDuplicate:");
    sb.append(this.isDuplicate);
    first = false;
    if (isSetTraceId()) {
      if (!first) sb.append(", ");
      sb.append("traceId:");
      sb.append(this.traceId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskName' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'srcInnerId' because it's a primitive and you chose the non-beans generator.
    if (storeSysOutId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'storeSysOutId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'taskRunDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'taskType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'afterStatus' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'beforeStatus' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'isDuplicate' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatusTaskRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusTaskRequestStandardScheme getScheme() {
      return new StatusTaskRequestStandardScheme();
    }
  }

  private static class StatusTaskRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatusTaskRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, StatusTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRC_INNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.srcInnerId = iprot.readI64();
              struct.setSrcInnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STORE_SYS_OUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeSysOutId = iprot.readString();
              struct.setStoreSysOutIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_RUN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.taskRunDate = iprot.readI64();
              struct.setTaskRunDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = iprot.readI32();
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AFTER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.afterStatus = iprot.readI32();
              struct.setAfterStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BEFORE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.beforeStatus = iprot.readI32();
              struct.setBeforeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_DUPLICATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isDuplicate = iprot.readBool();
              struct.setIsDuplicateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.traceId = iprot.readI32();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSrcInnerId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcInnerId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTaskRunDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskRunDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTaskType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAfterStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'afterStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetBeforeStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'beforeStatus' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIsDuplicate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'isDuplicate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, StatusTaskRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SRC_INNER_ID_FIELD_DESC);
      oprot.writeI64(struct.srcInnerId);
      oprot.writeFieldEnd();
      if (struct.storeSysOutId != null) {
        oprot.writeFieldBegin(STORE_SYS_OUT_ID_FIELD_DESC);
        oprot.writeString(struct.storeSysOutId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TASK_RUN_DATE_FIELD_DESC);
      oprot.writeI64(struct.taskRunDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
      oprot.writeI32(struct.taskType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AFTER_STATUS_FIELD_DESC);
      oprot.writeI32(struct.afterStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BEFORE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.beforeStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DUPLICATE_FIELD_DESC);
      oprot.writeBool(struct.isDuplicate);
      oprot.writeFieldEnd();
      if (struct.isSetTraceId()) {
        oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
        oprot.writeI32(struct.traceId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatusTaskRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public StatusTaskRequestTupleScheme getScheme() {
      return new StatusTaskRequestTupleScheme();
    }
  }

  private static class StatusTaskRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatusTaskRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatusTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.taskName);
      oprot.writeI64(struct.srcInnerId);
      oprot.writeString(struct.storeSysOutId);
      oprot.writeI64(struct.taskRunDate);
      oprot.writeI32(struct.taskType);
      oprot.writeI32(struct.afterStatus);
      oprot.writeI32(struct.beforeStatus);
      oprot.writeBool(struct.isDuplicate);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTraceId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTraceId()) {
        oprot.writeI32(struct.traceId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatusTaskRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.taskName = iprot.readString();
      struct.setTaskNameIsSet(true);
      struct.srcInnerId = iprot.readI64();
      struct.setSrcInnerIdIsSet(true);
      struct.storeSysOutId = iprot.readString();
      struct.setStoreSysOutIdIsSet(true);
      struct.taskRunDate = iprot.readI64();
      struct.setTaskRunDateIsSet(true);
      struct.taskType = iprot.readI32();
      struct.setTaskTypeIsSet(true);
      struct.afterStatus = iprot.readI32();
      struct.setAfterStatusIsSet(true);
      struct.beforeStatus = iprot.readI32();
      struct.setBeforeStatusIsSet(true);
      struct.isDuplicate = iprot.readBool();
      struct.setIsDuplicateIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.traceId = iprot.readI32();
        struct.setTraceIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

